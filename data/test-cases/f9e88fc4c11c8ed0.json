{"uid":"f9e88fc4c11c8ed0","name":"Drag and drop an element onto a target","fullName":"features\\action_chains.feature:Drag and drop an element onto a target","historyId":"233ff8feed40af417dc0a388cccff5d6.d41d8cd98f00b204e9800998ecf8427e","time":{"start":1756385546514,"stop":1756385561452,"duration":14938},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"C\"]\"}\n  (Session info: chrome=139.0.7258.155); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7f38278d5+2802741]\n\tGetHandleVerifier [0x0x7ff7f358eb70+79568]\n\t(No symbol) [0x0x7ff7f332c0fa]\n\t(No symbol) [0x0x7ff7f3382a96]\n\t(No symbol) [0x0x7ff7f3382d4c]\n\t(No symbol) [0x0x7ff7f33d6017]\n\t(No symbol) [0x0x7ff7f33aaccf]\n\t(No symbol) [0x0x7ff7f33d2e24]\n\t(No symbol) [0x0x7ff7f33aaa63]\n\t(No symbol) [0x0x7ff7f3373c91]\n\t(No symbol) [0x0x7ff7f3374a23]\n\tGetHandleVerifier [0x0x7ff7f3852ced+2979917]\n\tGetHandleVerifier [0x0x7ff7f384d0f3+2956371]\n\tGetHandleVerifier [0x0x7ff7f386acbd+3078173]\n\tGetHandleVerifier [0x0x7ff7f35a836e+184014]\n\tGetHandleVerifier [0x0x7ff7f35b024f+216495]\n\tGetHandleVerifier [0x0x7ff7f35970c4+113700]\n\tGetHandleVerifier [0x0x7ff7f3597279+114137]\n\tGetHandleVerifier [0x0x7ff7f357df78+10968]\n\tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\n\tRtlUserThreadStart [0x0x7ff8f92bedcb+43]","statusTrace":"fixturefunc = <function hold_item_C at 0x0000025ABACBF7E0>\nrequest = <FixtureRequest for <Function test_drag_and_drop_an_element_onto_a_target>>\nkwargs = {'driver': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5aa06a2d2d68bda45e8e582fe45ca3e9\")>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\steps\\test_action_chains.py:49: in hold_item_C\n    ClickAndHoldPage(driver).move_C_to_position_A()\ntests\\page_objects\\sel08_click_and_hold_page.py:15: in move_C_to_position_A\n    letter_C_element = self.driver.find_element(*self.letter_C_locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:917: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025ABAC32850>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff7f357df78+10968]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8f92bedcb+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"C\"]\"}\nE         (Session info: chrome=139.0.7258.155); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7f38278d5+2802741]\nE       \tGetHandleVerifier [0x0x7ff7f358eb70+79568]\nE       \t(No symbol) [0x0x7ff7f332c0fa]\nE       \t(No symbol) [0x0x7ff7f3382a96]\nE       \t(No symbol) [0x0x7ff7f3382d4c]\nE       \t(No symbol) [0x0x7ff7f33d6017]\nE       \t(No symbol) [0x0x7ff7f33aaccf]\nE       \t(No symbol) [0x0x7ff7f33d2e24]\nE       \t(No symbol) [0x0x7ff7f33aaa63]\nE       \t(No symbol) [0x0x7ff7f3373c91]\nE       \t(No symbol) [0x0x7ff7f3374a23]\nE       \tGetHandleVerifier [0x0x7ff7f3852ced+2979917]\nE       \tGetHandleVerifier [0x0x7ff7f384d0f3+2956371]\nE       \tGetHandleVerifier [0x0x7ff7f386acbd+3078173]\nE       \tGetHandleVerifier [0x0x7ff7f35a836e+184014]\nE       \tGetHandleVerifier [0x0x7ff7f35b024f+216495]\nE       \tGetHandleVerifier [0x0x7ff7f35970c4+113700]\nE       \tGetHandleVerifier [0x0x7ff7f3597279+114137]\nE       \tGetHandleVerifier [0x0x7ff7f357df78+10968]\nE       \tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\nE       \tRtlUserThreadStart [0x0x7ff8f92bedcb+43]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"C\"]\"}\n  (Session info: chrome=139.0.7258.155); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7f38278d5+2802741]\n\tGetHandleVerifier [0x0x7ff7f358eb70+79568]\n\t(No symbol) [0x0x7ff7f332c0fa]\n\t(No symbol) [0x0x7ff7f3382a96]\n\t(No symbol) [0x0x7ff7f3382d4c]\n\t(No symbol) [0x0x7ff7f33d6017]\n\t(No symbol) [0x0x7ff7f33aaccf]\n\t(No symbol) [0x0x7ff7f33d2e24]\n\t(No symbol) [0x0x7ff7f33aaa63]\n\t(No symbol) [0x0x7ff7f3373c91]\n\t(No symbol) [0x0x7ff7f3374a23]\n\tGetHandleVerifier [0x0x7ff7f3852ced+2979917]\n\tGetHandleVerifier [0x0x7ff7f384d0f3+2956371]\n\tGetHandleVerifier [0x0x7ff7f386acbd+3078173]\n\tGetHandleVerifier [0x0x7ff7f35a836e+184014]\n\tGetHandleVerifier [0x0x7ff7f35b024f+216495]\n\tGetHandleVerifier [0x0x7ff7f35970c4+113700]\n\tGetHandleVerifier [0x0x7ff7f3597279+114137]\n\tGetHandleVerifier [0x0x7ff7f357df78+10968]\n\tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\n\tRtlUserThreadStart [0x0x7ff8f92bedcb+43]","statusTrace":"fixturefunc = <function hold_item_C at 0x0000025ABACBF7E0>\nrequest = <FixtureRequest for <Function test_drag_and_drop_an_element_onto_a_target>>\nkwargs = {'driver': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5aa06a2d2d68bda45e8e582fe45ca3e9\")>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\steps\\test_action_chains.py:49: in hold_item_C\n    ClickAndHoldPage(driver).move_C_to_position_A()\ntests\\page_objects\\sel08_click_and_hold_page.py:15: in move_C_to_position_A\n    letter_C_element = self.driver.find_element(*self.letter_C_locator)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:917: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025ABAC32850>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff7f357df78+10968]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\\\\n\\\\tRtlUserThreadStart [0x0x7ff8f92bedcb+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"C\"]\"}\nE         (Session info: chrome=139.0.7258.155); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7f38278d5+2802741]\nE       \tGetHandleVerifier [0x0x7ff7f358eb70+79568]\nE       \t(No symbol) [0x0x7ff7f332c0fa]\nE       \t(No symbol) [0x0x7ff7f3382a96]\nE       \t(No symbol) [0x0x7ff7f3382d4c]\nE       \t(No symbol) [0x0x7ff7f33d6017]\nE       \t(No symbol) [0x0x7ff7f33aaccf]\nE       \t(No symbol) [0x0x7ff7f33d2e24]\nE       \t(No symbol) [0x0x7ff7f33aaa63]\nE       \t(No symbol) [0x0x7ff7f3373c91]\nE       \t(No symbol) [0x0x7ff7f3374a23]\nE       \tGetHandleVerifier [0x0x7ff7f3852ced+2979917]\nE       \tGetHandleVerifier [0x0x7ff7f384d0f3+2956371]\nE       \tGetHandleVerifier [0x0x7ff7f386acbd+3078173]\nE       \tGetHandleVerifier [0x0x7ff7f35a836e+184014]\nE       \tGetHandleVerifier [0x0x7ff7f35b024f+216495]\nE       \tGetHandleVerifier [0x0x7ff7f35970c4+113700]\nE       \tGetHandleVerifier [0x0x7ff7f3597279+114137]\nE       \tGetHandleVerifier [0x0x7ff7f357df78+10968]\nE       \tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\nE       \tRtlUserThreadStart [0x0x7ff8f92bedcb+43]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException","steps":[{"name":"Given I open the website \"https://selenium08.blogspot.com/2020/01/click-and-hold.html\"","time":{"start":1756385546515,"stop":1756385555292,"duration":8777},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://selenium08.blogspot.com/2020/01/click-and-hold.html'"},{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5aa06a2d2d68bda45e8e582fe45ca3e9\")>"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"When I move \"C\" to the position of item \"A\"","time":{"start":1756385555293,"stop":1756385561452,"duration":6159},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"C\"]\"}\n  (Session info: chrome=139.0.7258.155); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7f38278d5+2802741]\n\tGetHandleVerifier [0x0x7ff7f358eb70+79568]\n\t(No symbol) [0x0x7ff7f332c0fa]\n\t(No symbol) [0x0x7ff7f3382a96]\n\t(No symbol) [0x0x7ff7f3382d4c]\n\t(No symbol) [0x0x7ff7f33d6017]\n\t(No symbol) [0x0x7ff7f33aaccf]\n\t(No symbol) [0x0x7ff7f33d2e24]\n\t(No symbol) [0x0x7ff7f33aaa63]\n\t(No symbol) [0x0x7ff7f3373c91]\n\t(No symbol) [0x0x7ff7f3374a23]\n\tGetHandleVerifier [0x0x7ff7f3852ced+2979917]\n\tGetHandleVerifier [0x0x7ff7f384d0f3+2956371]\n\tGetHandleVerifier [0x0x7ff7f386acbd+3078173]\n\tGetHandleVerifier [0x0x7ff7f35a836e+184014]\n\tGetHandleVerifier [0x0x7ff7f35b024f+216495]\n\tGetHandleVerifier [0x0x7ff7f35970c4+113700]\n\tGetHandleVerifier [0x0x7ff7f3597279+114137]\n\tGetHandleVerifier [0x0x7ff7f357df78+10968]\n\tBaseThreadInitThunk [0x0x7ff8f7954cb0+16]\n\tRtlUserThreadStart [0x0x7ff8f92bedcb+43]\n\n","statusTrace":"  File \"D:\\a\\selenium-pytest\\selenium-pytest\\.venv\\Lib\\site-packages\\pytest_bdd\\scenario.py\", line 240, in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=context.step_func, request=request, kwargs=kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\tests\\steps\\test_action_chains.py\", line 49, in hold_item_C\n    ClickAndHoldPage(driver).move_C_to_position_A()\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\tests\\page_objects\\sel08_click_and_hold_page.py\", line 15, in move_C_to_position_A\n    letter_C_element = self.driver.find_element(*self.letter_C_locator)\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 917, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 448, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\a\\selenium-pytest\\selenium-pytest\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5aa06a2d2d68bda45e8e582fe45ca3e9\")>"}],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Then the positions of item \"C\" and item \"A\" should be interchanged","time":{"start":1756385561878,"stop":1756385561878,"duration":0},"status":"skipped","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"runnervm0hlvn"},{"name":"thread","value":"7028-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Perform user interactions using Selenium ActionChains"},{"name":"tag","value":"drag_and_drop"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["drag_and_drop"]},"source":"f9e88fc4c11c8ed0.json","parameterValues":[]}